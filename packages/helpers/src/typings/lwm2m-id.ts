/** Declaration file generated by dts-gen */

declare module 'lwm2m-id' {
  export const SpecificResrcChar: {
    aIn: {
      aInCurrValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    aOut: {
      aOutCurrValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    accelerometer: {
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      xValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      yValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      zValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    accessCtrl: {
      ACL: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      ACLOwner: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      objectId: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      objectInstanceId: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
    }
    acidity: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    actuation: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dimmer: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      mStateOut: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      onOff: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      onTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
    }
    addressableTextDisplay: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      clearDisplay: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      contrast: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      level: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      maxXCoord: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxYCoord: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      text: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      xCoord: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      yCoord: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    altitude: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    audioClip: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      clip: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      level: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      soundDuration: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      trigger: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    barometer: {
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    buzzer: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      level: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      minOffTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      onOff: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      timeDuration: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    colour: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      colour: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    concentration: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    conductivity: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    connMonitor: {
      APN: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      SMCC: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      SMNC: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      availNwkBearer: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      cellId: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      ip: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      linkQuality: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      linkUtil: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      nwkBearer: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      radioStrength: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      routeIp: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    connStatistics: {
      SMSRxCounter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      SMSTxCounter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      avgMsgSize: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMsgSize: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      rxData: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      startOrReset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      txData: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    current: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    dIn: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      counter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      counterReset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dInPolarity: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dInState: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      debouncePeriod: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      edgeSelection: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      sensorType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    dOut: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dOutPolarity: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dOutState: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    depth: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    device: {
      UTCOffset: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      availPwrSrc: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      battLevel: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      battStatus: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      bindAndModes: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      currTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      devType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      errCode: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      factoryReset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      firmware: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      hwVer: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      manuf: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      memFree: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      memTotal: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      model: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      pwrSrcCurrent: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      pwrSrcVoltage: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      reboot: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetErrCode: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      serial: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      swVer: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      timezone: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    direction: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      compassDir: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    distance: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    energy: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      cumulActivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetCumulEnergy: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    firmware: {
      package: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      packageURI: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      pkgName: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      pkgVer: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      state: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      update: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      updateResult: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      updateSuppObjects: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    frequency: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    generic: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    gpsLocation: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      compassDir: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      latitude: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      longitude: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      timestamp: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      uncertainty: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      velocity: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    gyrometer: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxXValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxYValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxZValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minXValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minYValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minZValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      xValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      yValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      zValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    humidity: {
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    illuminance: {
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    levelControl: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      level: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      offTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      onTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    lightCtrl: {
      colour: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      cumulActivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dimmer: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      onOff: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      onTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      pwrFactor: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    load: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    loadCtrl: {
      avgLoadAdjPct: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      criticalLevel: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      durationInMin: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dutyCycle: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      eventId: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      startTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    location: {
      alt: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      lat: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      lon: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      radius: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      speed: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      timestamp: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      velocity: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    loudness: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    lwm2mSecurity: {
      bootstrapServer: {
        access: any
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      clientHoldOffTime: {
        access: any
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      lwm2mServerSmsNum: {
        access: any
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      lwm2mServerURI: {
        access: any
        init: string
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      pubKeyId: {
        access: any
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      secretKey: {
        access: any
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      securityMode: {
        access: any
        init: boolean
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      serverPubKeyId: {
        access: any
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      shortServerId: {
        access: any
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      smsBindingKeyParam: {
        access: any
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      smsBindingSecretKey: {
        access: any
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      smsSecurityMode: {
        access: any
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
    }
    lwm2mServer: {
      binding: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      defaultMaxPeriod: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      defaultMinPeriod: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      disable: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      disableTimeout: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      lifetime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      notificationStoring: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      regUpdateTrigger: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      shortServerId: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
    }
    magnetometer: {
      compassDir: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      xValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      yValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      zValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    multipleAxisJoystick: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      counter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dInState: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      xValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      yValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      zValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
    }
    multistateSelector: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      mStateIn: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    onOffSwitch: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      counter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dInState: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      offTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      onTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    percentage: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    positioner: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      currentPos: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      maxLimit: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minLimit: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      remainTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      transTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    power: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    powerFactor: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    presence: {
      busyToClearDelay: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      clearToBusyDelay: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      counter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      counterReset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dInState: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    pressure: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    pushButton: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      counter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dInState: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    pwrCtrl: {
      cumulActivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      dimmer: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      onOff: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      onTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      pwrFactor: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    pwrMea: {
      activePwrCal: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      cumulActivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      cumulReactivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      currCal: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      instActivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      instReactivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaActivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaReactivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeActivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeReactivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaActivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaReactivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeActivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeReactivePwr: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      pwrFactor: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      reactivePwrCal: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetCumulEnergy: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    rate: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    setPoint: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      colour: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      setPointValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    temperature: {
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    time: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      currentTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      fracTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
    }
    timer: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      counter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      cumulTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      digitalState: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      eventCounter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minOffTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      mode: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: number
        type: string
      }
      onOff: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      remainTime: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      timeDuration: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      trigger: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    upDownControl: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      decInputState: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      downCounter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      incInputState: {
        access: string
        init: boolean
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      upCounter: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
    voltage: {
      appType: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      calOffset: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      maxRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minMeaValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      minRangeValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      resetMinMaxMeaValues: {
        access: string
        init: any
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      sensorValue: {
        access: string
        init: number
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
      units: {
        access: string
        init: string
        mand: boolean
        multi: boolean
        range: any
        type: string
      }
    }
  }

  export const SpecificRid: {
    aIn: {
      aInCurrValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    aOut: {
      aOutCurrValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    accelerometer: {
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      xValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      yValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      zValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    accessCtrl: {
      ACL: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      ACLOwner: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      objectId: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      objectInstanceId: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    acidity: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    actuation: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dimmer: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      mStateOut: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      onOff: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      onTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    addressableTextDisplay: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      clearDisplay: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      contrast: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      level: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxXCoord: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxYCoord: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      text: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
      xCoord: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      yCoord: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    altitude: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    audioClip: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      clip: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      level: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      soundDuration: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
      trigger: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    barometer: {
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    buzzer: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      level: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minOffTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      onOff: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      timeDuration: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
    }
    colour: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      colour: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    concentration: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    conductivity: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    connMonitor: {
      APN: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      SMCC: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      SMNC: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      availNwkBearer: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      cellId: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      ip: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      isDefined: any
      isFlaggable: boolean
      linkQuality: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      linkUtil: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      nwkBearer: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      radioStrength: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      routeIp: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    connStatistics: {
      SMSRxCounter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      SMSTxCounter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      avgMsgSize: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMsgSize: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      rxData: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      startOrReset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
      txData: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    current: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    dIn: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      counter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      counterReset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dInPolarity: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dInState: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      debouncePeriod: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      edgeSelection: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      sensorType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    dOut: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dOutPolarity: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dOutState: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      set: any
      size: number
      toJSON: any
    }
    depth: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    device: {
      UTCOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      availPwrSrc: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      battLevel: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      battStatus: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      bindAndModes: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      currTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      devType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      errCode: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      extend: any
      factoryReset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      firmware: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      hwVer: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      indirection: number
      isDefined: any
      isFlaggable: boolean
      manuf: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      memFree: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      memTotal: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      model: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      pwrSrcCurrent: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      pwrSrcVoltage: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      reboot: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetErrCode: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      serial: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      swVer: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      timezone: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
    }
    direction: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      compassDir: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    distance: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    energy: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      cumulActivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      resetCumulEnergy: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    firmware: {
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      package: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      packageURI: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      pkgName: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      pkgVer: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      state: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
      update: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      updateResult: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      updateSuppObjects: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    frequency: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    generic: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    gpsLocation: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      compassDir: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      latitude: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      longitude: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      timestamp: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
      uncertainty: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      velocity: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    gyrometer: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxXValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxYValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxZValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minXValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minYValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minZValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      xValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      yValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      zValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    humidity: {
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    illuminance: {
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    levelControl: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      level: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      offTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      onTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    lightCtrl: {
      colour: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      cumulActivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dimmer: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      onOff: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      onTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      pwrFactor: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    load: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    loadCtrl: {
      avgLoadAdjPct: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      criticalLevel: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      durationInMin: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dutyCycle: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      eventId: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      set: any
      size: number
      startTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
    }
    location: {
      alt: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      lat: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      lon: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      radius: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      speed: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      timestamp: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
      velocity: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    loudness: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    lwm2mSecurity: {
      bootstrapServer: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      clientHoldOffTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      lwm2mServerSmsNum: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      lwm2mServerURI: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      pubKeyId: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      secretKey: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      securityMode: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      serverPubKeyId: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      shortServerId: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      size: number
      smsBindingKeyParam: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      smsBindingSecretKey: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      smsSecurityMode: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
    }
    lwm2mServer: {
      binding: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      defaultMaxPeriod: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      defaultMinPeriod: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      disable: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      disableTimeout: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      lifetime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      notificationStoring: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      regUpdateTrigger: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      shortServerId: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      size: number
      toJSON: any
    }
    magnetometer: {
      compassDir: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      xValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      yValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      zValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    multipleAxisJoystick: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      counter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dInState: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      set: any
      size: number
      toJSON: any
      xValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      yValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      zValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    multistateSelector: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      mStateIn: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    onOffSwitch: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      counter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dInState: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      offTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      onTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    percentage: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    positioner: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      currentPos: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxLimit: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minLimit: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      remainTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      transTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    power: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    powerFactor: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    presence: {
      busyToClearDelay: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      clearToBusyDelay: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      counter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      counterReset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dInState: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      sensorType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    pressure: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    pushButton: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      counter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dInState: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      set: any
      size: number
      toJSON: any
    }
    pwrCtrl: {
      cumulActivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      dimmer: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      onOff: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      onTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      pwrFactor: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    pwrMea: {
      activePwrCal: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      cumulActivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      cumulReactivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      currCal: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      instActivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      instReactivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      isDefined: any
      isFlaggable: boolean
      maxMeaActivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxMeaReactivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeActivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeReactivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaActivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaReactivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeActivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeReactivePwr: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      pwrFactor: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      reactivePwrCal: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetCumulEnergy: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
    }
    rate: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    setPoint: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      colour: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      set: any
      setPointValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    temperature: {
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    time: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      currentTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      fracTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      set: any
      size: number
      toJSON: any
    }
    timer: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      counter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      cumulTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      digitalState: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      eventCounter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      minOffTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      mode: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      onOff: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      remainTime: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      timeDuration: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      toJSON: any
      trigger: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    upDownControl: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      decInputState: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      downCounter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      incInputState: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      indirection: number
      isDefined: any
      isFlaggable: boolean
      set: any
      size: number
      toJSON: any
      upCounter: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
    voltage: {
      appType: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      calOffset: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      enums: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }[]
      extend: any
      freezeEnums: any
      get: any
      getKey: any
      getValue: any
      indirection: number
      isDefined: any
      isFlaggable: boolean
      maxMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      maxRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minMeaValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      minRangeValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      resetMinMaxMeaValues: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      sensorValue: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
      set: any
      size: number
      toJSON: any
      units: {
        has: any
        is: any
        key: string
        toJSON: any
        toString: any
        value: number
        valueOf: any
      }
    }
  }

  export const objectSpec: {
    accessCtrl: {
      mand: boolean
      multi: boolean
    }
    connMonitor: {
      mand: boolean
      multi: boolean
    }
    connStatistics: {
      mand: boolean
      multi: boolean
    }
    device: {
      mand: boolean
      multi: boolean
    }
    firmware: {
      mand: boolean
      multi: boolean
    }
    location: {
      mand: boolean
      multi: boolean
    }
    lwm2mSecurity: {
      mand: boolean
      multi: boolean
    }
    lwm2mServer: {
      mand: boolean
      multi: boolean
    }
  }

  export function addObjectSpec(oid: any, items: any): any

  export function addOid(items: any): any

  export function addSpecificResrcChar(oid: any, chars: any): any

  export function addSpecificRid(oid: any, items: any): any

  export function addUniqueRid(items: any): any

  export function getCmd(cmdId: any): any

  export function getOdef(oid: any): any

  export function getOid(oid: any): any

  export function getRdef(oid: any, rid: any): any

  export function getRid(oid: any, rid: any): any

  export function getRspCode(code: any): any

  export function getSpecificResrcChar(oid: any, rid: any): any

  export namespace Cmd {
    const enums: {
      has: any
      is: any
      key: string
      toJSON: any
      toString: any
      value: number
      valueOf: any
    }[]

    const indirection: number

    const isFlaggable: boolean

    const size: number

    function extend(map: any): void

    function freezeEnums(): any

    function get(key: any, offset: any): any

    function getKey(value: any): any

    function getValue(key: any): any

    function isDefined(enumItem: any): any

    function set(buffer: any, offset: any, value: any): any

    function toJSON(): any

    namespace discover {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace execute {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace notify {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace observe {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace ping {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace read {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace unknown {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace write {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace writeAttrs {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }
  }

  export namespace Oid {
    const enums: {
      has: any
      is: any
      key: string
      toJSON: any
      toString: any
      value: number
      valueOf: any
    }[]

    const indirection: number

    const isFlaggable: boolean

    const size: number

    function extend(map: any): void

    function freezeEnums(): any

    function get(key: any, offset: any): any

    function getKey(value: any): any

    function getValue(key: any): any

    function isDefined(enumItem: any): any

    function set(buffer: any, offset: any, value: any): any

    function toJSON(): any

    namespace aIn {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace aOut {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace accelerometer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace accessCtrl {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace acidity {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace activeCmdhPolicy {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace actuation {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace addressableTextDisplay {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace altitude {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace apnConnProfile {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace audioClip {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace barometer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace bearerSelection {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace buzzer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cellularConn {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cmdhBuffer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cmdhDefEcParamsValues {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cmdhDefEcValues {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cmdhDefaults {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cmdhLimits {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cmdhNetworkAccessRules {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cmdhNwAccessRule {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cmdhPolicy {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace colour {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace concentration {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace conductivity {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace connMonitor {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace connStatistics {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace current {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace dIn {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace dOut {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace depth {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace devCapMgmt {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace device {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace direction {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace distance {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace energy {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace firmware {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace frequency {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace generic {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace gpsLocation {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace gyrometer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace humidity {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace illuminance {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace levelControl {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace lightCtrl {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace load {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace loadCtrl {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace location {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace lockAndWipe {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace loudness {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace lwm2mSecurity {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace lwm2mServer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace magnetometer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace multipleAxisJoystick {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace multistateSelector {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace onOffSwitch {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace percentage {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace positioner {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace power {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace powerFactor {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace presence {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace pressure {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace pushButton {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace pwrCtrl {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace pwrMea {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace rate {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace setPoint {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace swUpdate {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace temperature {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace time {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace timer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace upDownControl {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace voltage {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace wlanConn {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }
  }

  export namespace RspCode {
    const enums: {
      has: any
      is: any
      key: string
      toJSON: any
      toString: any
      value: number
      valueOf: any
    }[]

    const indirection: number

    const isFlaggable: boolean

    const size: number

    function extend(map: any): void

    function freezeEnums(): any

    function get(key: any, offset: any): any

    function getKey(value: any): any

    function getValue(key: any): any

    function isDefined(enumItem: any): any

    function set(buffer: any, offset: any, value: any): any

    function toJSON(): any

    namespace BadRequest {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace Changed {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace Conflict {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace Content {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace Created {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace Deleted {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace Forbidden {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace InternalServerError {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace MethodNotAllowed {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace NotFound {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace OK {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace Timeout {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace Unauthorized {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }
  }

  export namespace UniqueRid {
    const enums: {
      has: any
      is: any
      key: string
      toJSON: any
      toString: any
      value: number
      valueOf: any
    }[]

    const indirection: number

    const isFlaggable: boolean

    const size: number

    function extend(map: any): void

    function freezeEnums(): any

    function get(key: any, offset: any): any

    function getKey(value: any): any

    function getValue(key: any): any

    function isDefined(enumItem: any): any

    function set(buffer: any, offset: any, value: any): any

    function toJSON(): any

    namespace aInCurrValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace aOutCurrValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace activePwrCal {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace appType {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace avgLoadAdjPct {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace busyToClearDelay {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace calOffset {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace clearDisplay {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace clearToBusyDelay {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace clip {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace colour {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace compassDir {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace contrast {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace counter {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace counterReset {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace criticalLevel {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cumulActivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cumulReactivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace cumulTime {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace currCal {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace currentPos {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace currentTime {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace dInPolarity {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace dInState {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace dOutPolarity {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace dOutState {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace debouncePeriod {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace decInputState {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace digitalState {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace dimmer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace displayMaxXCoord {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace displayMaxYCoord {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace downCounter {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace durationInMin {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace dutyCycle {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace edgeSelection {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace eventCounter {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace eventId {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace fracTime {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace hostDeviceManuf {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace hostDeviceMdl {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace hostDeviceSwVer {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace hostDeviceUID {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace incInputState {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace instActivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace instReactivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace latitude {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace level {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace longitude {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace mStateIn {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace mStateOut {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxLimit {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxMeaActivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxMeaReactivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxMeaValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxRangeActivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxRangeReactivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxRangeValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxXCoord {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxXValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxYCoord {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace maxYValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minLimit {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minMeaActivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minMeaReactivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minMeaValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minOffTime {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minRangeActivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minRangeReactivePwr {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minRangeValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minXValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minYValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace minZValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace mode {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace objectInstanceHandle {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace objectVersion {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace offTime {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace onOff {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace onTime {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace pwrFactor {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace reactivePwrCal {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace remainTime {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace resetCumulEnergy {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace resetMinMaxMeaValues {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace sensorType {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace sensorValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace setPointValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace soundDuration {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace startTime {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace text {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace timeDuration {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace timestamp {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace transTime {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace trigger {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace uncertainty {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace units {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace upCounter {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace velocity {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace xCoord {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace xValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace yCoord {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace yValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }

    namespace zValue {
      const key: string

      const value: number

      function has(value: any): any

      function is(key: any): any

      function toJSON(): any

      function toString(): any

      function valueOf(): any
    }
  }
}
